"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const anchor = __importStar(require("@coral-xyz/anchor"));
const helpers_1 = require("../utils/helpers");
const common_1 = require("../utils/common");
const spl_token_1 = require("@solana/spl-token");
/**
 *
 * @param {anchor.web3.PublicKey} key - Public Key of the existing storage account
 * @param {number} amount - amount of $SHDW to transfer to stake account
 * @returns {txid: string} - confirmed transaction id
 */
function topUp(key, amount) {
    return __awaiter(this, void 0, void 0, function* () {
        let stakeAccount = (yield (0, helpers_1.getStakeAccount)(this.program, key))[0];
        const ownerAta = yield (0, helpers_1.findAssociatedTokenAddress)(this.wallet.publicKey, common_1.tokenMint);
        const tx = new anchor.web3.Transaction().add((0, spl_token_1.createTransferInstruction)(ownerAta, stakeAccount, this.wallet.publicKey, new anchor.BN(amount).toNumber(), undefined, spl_token_1.TOKEN_PROGRAM_ID));
        try {
            tx.recentBlockhash = (yield this.connection.getLatestBlockhash("max")).blockhash;
            tx.feePayer = this.wallet.publicKey;
            let signedTx = yield this.wallet.signTransaction(tx);
            let txid;
            txid = yield (0, helpers_1.sendAndConfirm)(this.connection, signedTx.serialize(), { skipPreflight: false }, "max");
            return Promise.resolve(txid);
        }
        catch (e) {
            return Promise.reject(new Error(e));
        }
    });
}
exports.default = topUp;
//# sourceMappingURL=top-up.js.map